<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:local="*"
		  creationComplete="onCreationCompleteHandler()">
	<fx:Declarations>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import akdcl.skeleton.Armature;
			import akdcl.skeleton.Bone;
			import akdcl.skeleton.objects.BoneData;
			import akdcl.skeleton.utils.ConstValues;
			
			import flash.filters.GlowFilter;
			
			import message.Message;
			import message.MessageDispatcher;
			
			import model.AnimationDataProxy;
			import model.ArmatureDataProxy;
			import model.ImportDataProxy;
			import model.JSFLProxy;
			
			import mx.controls.Alert;
			import mx.events.ColorPickerEvent;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.GridSelectionEvent;
			
			import utils.TextureUtil;
			
			private static const AT_NAME:String = ConstValues.AT + ConstValues.A_NAME;
			
			private var jsflProxy:JSFLProxy;
			
			[Bindable]
			private var importDataProxy:ImportDataProxy;
			
			[Bindable]
			private var armatureDataProxy:ArmatureDataProxy;
			
			[Bindable]
			private var animationDataProxy:AnimationDataProxy;
			
			private var armatures:Object;
			private var isDragedArmature:Boolean;
			
			private var armature:Armature;
			private var boneDisplay:Object;
			private var boneDisplayGlowFilter:GlowFilter = new GlowFilter(0xFF0000,0.5,8,8,4);
			
			private var alert:Alert;
			private var container:Sprite;
			private var shape:Shape;
			private var maxArmatureWidth:int;
			private var maxArmatureHeight:int;
			
			private function onCreationCompleteHandler():void{
				jsflProxy = JSFLProxy.getInstance();
				importDataProxy = ImportDataProxy.getInstance();
				armatureDataProxy = importDataProxy.armatureDataProxy;
				animationDataProxy = importDataProxy.animationDataProxy;
				
				armatureList.dataProvider = importDataProxy.armaturesMC;
				movementList.dataProvider = animationDataProxy.movementsMC;
				displayList.dataProvider = armatureDataProxy.displaysMC;
				
				armatureList.addEventListener(GridSelectionEvent.SELECTION_CHANGE, onArmatureChangeHandler);
				movementList.addEventListener(GridSelectionEvent.SELECTION_CHANGE, onMovementChangeHandler);
				//displayList.addEventListener(GridSelectionEvent.SELECTION_CHANGE, onTextureChangeHandler);
				
				boneTree.addEventListener(ListEvent.CHANGE, onMovementBoneChangeHandler);
				boneTree.addEventListener(DragEvent.DRAG_COMPLETE, onBoneDragCompleteHandler);
				
				sliderDurationTo.addEventListener(Event.CHANGE, movementValueChangeHandler);
				numDurationTo.addEventListener(Event.CHANGE, movementValueChangeHandler);
				
				sliderDurationTween.addEventListener(Event.CHANGE, movementValueChangeHandler);
				numDurationTween.addEventListener(Event.CHANGE, movementValueChangeHandler);
				
				checkLoop.addEventListener(Event.CHANGE, movementValueChangeHandler);
				
				sliderTweenEasing.addEventListener(Event.CHANGE, movementValueChangeHandler);
				
				sliderScale.addEventListener(Event.CHANGE, movementValueChangeHandler);
				numScale.addEventListener(Event.CHANGE, movementValueChangeHandler);
				
				sliderDelay.addEventListener(Event.CHANGE, movementValueChangeHandler);
				numDelay.addEventListener(Event.CHANGE, movementValueChangeHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FLADATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_ARMATURE_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_ARMATURE_DATA_COMPLETE, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_TEXTURE_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_TEXTURE_DATA_COMPLETE, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_SWF, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_SWF_COMPLETE, onCommandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA_ERROR, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA_PROGRESS, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA_COMPLETE, onCommandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT_CANCEL, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT_ERROR, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT_COMPLETE, onCommandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_IMPORT_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_ARMATURE_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_ANIMATION_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_MOVEMENT_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_BONE_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_DISPLAY_DATA, onCommandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_MOVEMENT_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_MOVEMENTBONE_DATA, onCommandHandler);
				
				container = new Sprite();
				armatureContainer.addChild(container);
				shape = new Shape();
				shape.graphics.drawRect(0,0,100,100);
				container.addChild(shape);
				container.addEventListener(MouseEvent.MOUSE_DOWN, onContainerMouseHandler);
				container.addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);
			}
			
			private function importData():void{
				var _window:ImportWindow = new ImportWindow();
				PopUpManager.addPopUp(_window, this, true);
				PopUpManager.centerPopUp(_window);
			}
			
			private function exportData():void{
				var _window:ExportWindow = new ExportWindow();
				PopUpManager.addPopUp(_window, this, true);
				PopUpManager.centerPopUp(_window);
			}
			
			private function clearAlert():void{
				if(alert){
					PopUpManager.removePopUp(alert);
					alert = null;
				}
			}
			
			private function onCommandHandler(_e:Message):void{
				var _armatureName:String;
				var _movementName:String;
				switch(_e.type){
					case MessageDispatcher.LOAD_FLADATA:
						if(_e.parameters[0] > 0){
							alert = Alert.show("Waitting...");
							if(armature){
								armature.animation.stop();
							}
						}else{
							alert = Alert.show("未找到符合骨架结构的元件！");
						}
						break;
					case MessageDispatcher.LOAD_ARMATURE_DATA:
						if(alert){
							//+ _e.parameters[0]
							alert.title = "Read armature " + _e.parameters[1] + "/" + _e.parameters[2];
						}
						break;
					case MessageDispatcher.LOAD_ARMATURE_DATA_COMPLETE:
						break;
					case MessageDispatcher.LOAD_TEXTURE_DATA:
						if(alert){
							//+ _e.parameters[0]
							alert.title = "Read texture " + _e.parameters[1] + "/" + _e.parameters[2];
						}
						break;
					case MessageDispatcher.LOAD_TEXTURE_DATA_COMPLETE:
						break;
					case MessageDispatcher.LOAD_SWF:
						break;
					case MessageDispatcher.LOAD_SWF_COMPLETE:
						clearAlert();
						importDataProxy.setData(_e.parameters[0], _e.parameters[1], _e.parameters[2], _e.parameters[3]);
						break;
					case MessageDispatcher.LOAD_FILEDATA:
						alert = Alert.show("Waitting...");
						if(armature){
							armature.animation.stop();
						}
						break;
					case MessageDispatcher.LOAD_FILEDATA_ERROR:
						clearAlert();
						break;
					case MessageDispatcher.LOAD_FILEDATA_PROGRESS:
						if(alert){
							alert.title = "Import progress " + Math.round(_e.parameters[0] * 100) + "%";
						}
						break;
					case MessageDispatcher.LOAD_FILEDATA_COMPLETE:
						clearAlert();
						importDataProxy.setData(_e.parameters[0], _e.parameters[1], _e.parameters[2], _e.parameters[3]);
						break;
					case MessageDispatcher.EXPORT:
						alert = Alert.show("Waitting...");
						break;
					case MessageDispatcher.EXPORT_CANCEL:
						clearAlert();
						break;
					case MessageDispatcher.EXPORT_ERROR:
						clearAlert();
						break;
					case MessageDispatcher.EXPORT_COMPLETE:
						clearAlert();
						break;
					case MessageDispatcher.CHANGE_IMPORT_DATA:
						for each(armature in armatures){
							armature.dispose();
						}
						armature = null;
						armatures = {};
						
						armatureList.selectedIndex = -1;
						armatureList.selectedIndex = 0;
						onArmatureChangeHandler(null);
						break;
					case MessageDispatcher.CHANGE_ARMATURE_DATA:
						isDragedArmature = false;
						if(armature && armature.display && armature.display.parent){
							armature.display.parent.removeChild(armature.display as DisplayObject);
						}
						
						_armatureName = armatureDataProxy.armatureName;
						armature = armatures[_armatureName];
						if(!armature){
							armatures[_armatureName] = armature = importDataProxy.baseFactory.buildArmature(_armatureName);
						}
						if(armature.display){
							container.scaleX = container.scaleY = 1;
							container.addChild(armature.display as DisplayObject);
						}
						boneTree.dataProvider = armatureDataProxy.bonesMC;
						updateTextureDisplay();
						break;
					case MessageDispatcher.CHANGE_ANIMATION_DATA:
						movementList.selectedIndex = -1;
						movementList.selectedIndex = 0;
						onMovementChangeHandler(null);
						break;
					case MessageDispatcher.CHANGE_MOVEMENT_DATA:
						maxArmatureWidth = 0;
						maxArmatureHeight = 0;
						
						_movementName = _e.parameters[0];
						if(_movementName && armature){
							armature.animation.play(_movementName);
						}
						
						boneTree.selectedIndex = -1;
						boneTree.selectedIndex = 0;
						
						var _durationTo:int = animationDataProxy.durationTo;
						var _durationTween:int = animationDataProxy.durationTween;
						if(_durationTo < 0){
							numDurationTo.value = 0;
							numDurationTo.enabled = false;
							sliderDurationTo.value = 0;
							sliderDurationTo.enabled = false;
						}else{
							numDurationTo.value = _durationTo;
							numDurationTo.enabled = true;
							sliderDurationTo.value = _durationTo;
							sliderDurationTo.enabled = true;
						}
						if(_durationTween < 0){
							numDurationTween.value = 0;
							numDurationTween.enabled = false;
							sliderDurationTween.value = 0;
							sliderDurationTween.enabled = false;
							checkLoop.selected = false;
							checkLoop.enabled = false;
							sliderTweenEasing.value = 0;
							sliderTweenEasing.enabled = false;
							numScale.enabled = false;
							numDelay.enabled = false;
							sliderScale.enabled = false;
							sliderDelay.enabled = false;
						}else{
							numDurationTween.value = _durationTween;
							numDurationTween.enabled = true;
							sliderDurationTween.value = _durationTween;
							sliderDurationTween.enabled = true;
							checkLoop.selected = animationDataProxy.loop;
							checkLoop.enabled = true;
							sliderTweenEasing.value = animationDataProxy.tweenEasing;
							sliderTweenEasing.enabled = true;
							numScale.enabled = true;
							numDelay.enabled = true;
							sliderScale.enabled = true;
							sliderDelay.enabled = true;
						}
						onMovementBoneChangeHandler(null);
						break;
					case MessageDispatcher.CHANGE_BONE_DATA:
						animationDataProxy.changeBone(armatureDataProxy.boneName);
						var _boneScale:Number = animationDataProxy.boneScale;
						var _boneDelay:Number = animationDataProxy.boneDelay;
						numScale.value = _boneScale;
						numDelay.value = _boneDelay;
						sliderScale.value = _boneScale;
						sliderDelay.value = _boneDelay;
						armatureDataProxy.changeBoneDisplay();
						
						if(boneDisplay){
							boneDisplay.filters = null;
							boneDisplay = null;
						}
						
						if(armature && armature.display){
							var _bone:Bone = armature.getBone(armatureDataProxy.boneName);
							if(_bone){
								boneDisplay = _bone.display || (_bone.childArmature?_bone.childArmature.display:null);
								if(boneDisplay){
									boneDisplay.filters = [boneDisplayGlowFilter];
								}
							}
						}
						break;
					case MessageDispatcher.UPDATE_MOVEMENT_DATA:
						_movementName = _e.parameters[0];
						if(_movementName && armature){
							armature.animation.play(_movementName);
						}
						if(!importDataProxy.isSWFSource){
							jsflProxy.changeMovement(armatureDataProxy.armatureName, _movementName, _e.parameters[1]);
						}
						break;
					case MessageDispatcher.UPDATE_MOVEMENTBONE_DATA:
						_movementName = _e.parameters[0];
						if(_movementName && armature){
							armature.animation.play(_movementName);
						}
						if(!importDataProxy.isSWFSource){
							var _movementXMLCopy:XML = _e.parameters[1].copy();
							delete _movementXMLCopy.elements(ConstValues.BONE).*;
							delete _movementXMLCopy[ConstValues.FRAME];
							jsflProxy.changeMovement(armatureDataProxy.armatureName, _movementName, _movementXMLCopy);
						}
						break;
				}
			}
			
			private function onEnterFrameHandler(_e:Event):void{
				var _sW:int;
				var _sH:int;
				var _display:Object;
				if(armature){
					armature.update();
					_display = armature.display;
					if(_display){
						_sW = shape.width;
						_sH = shape.height;
						maxArmatureWidth = Math.max(_display.width, maxArmatureWidth);
						maxArmatureHeight = Math.max(_display.height, maxArmatureHeight);
						if(_sW < maxArmatureWidth || _sH < maxArmatureHeight){
							_sW = shape.width = maxArmatureWidth * 1.4;
							_sH = shape.height = maxArmatureHeight * 1.4;
						}else if(_sW > maxArmatureWidth * 1.8 || _sH > maxArmatureHeight * 1.8){
							_sW = shape.width = maxArmatureWidth * 1.4;
							_sH = shape.height = maxArmatureHeight * 1.4;
						}
						if(!isDragedArmature){
							_display.x = _sW * 0.5;
							_display.y = _sH * 0.5;
						}
					}
					
				}
			}
			
			private function onContainerMouseHandler(_e:Event):void{
				if(stage){
					stage.addEventListener(MouseEvent.MOUSE_UP, onContainerMouseHandler);
				}
				var _display:Object = armature?armature.display:null;
				if(!_display){
					return;
				}
				switch(_e.type){
					case MouseEvent.MOUSE_DOWN:
						isDragedArmature = true;
						_display.startDrag();
						break;
					case MouseEvent.MOUSE_UP:
						_display.stopDrag();
						break;
				}
			}
			
			private function onMouseWheelHandler(event:MouseEvent):void
			{
				var _scale:Number;
				_scale = container.scaleX;
				if(event.delta > 0){
					if(_scale < 4){
						container.scaleX = container.scaleY = _scale + 0.1;
					}
				}else{
					if(_scale > 0.2){
						container.scaleX = container.scaleY = _scale - 0.1;
					}
				}
				updateTextureDisplay();
			}
			
			private function updateTextureDisplay():void{
				armatureContainerGroup.width = container.width;
				armatureContainerGroup.height = container.height;
			}
			
			private function onArmatureChangeHandler(_e:Event):void{
				var _armatureName:String = ImportDataProxy.getElementName(armatureList.selectedItem as XML);
				armatureDataProxy.setData(importDataProxy.getArmatureXMLByName(_armatureName));
				animationDataProxy.setData(importDataProxy.getAnimationXMLByName(_armatureName));
			}
			
			private function onMovementChangeHandler(_e:Event):void{
				var _movementName:String = ImportDataProxy.getElementName(movementList.selectedItem as XML);
				animationDataProxy.changeMovement(_movementName);
			}
			
			private function onMovementBoneChangeHandler(_e:Event):void{
				var _boneName:String = ImportDataProxy.getElementName(boneTree.selectedItem as XML);
				armatureDataProxy.changeBone(_boneName);
			}
			
			private function onBoneDragCompleteHandler(_e:DragEvent):void{
				if(armatureDataProxy.changeBoneParent(boneTree.lastMoveNode)){
					var _boneName:String = armatureDataProxy.boneName;
					animationDataProxy.changeBoneParent(_boneName);
					if(armature){
						var _boneData:BoneData = importDataProxy.skeletonData.getArmatureData(importDataProxy.armatureDataProxy.armatureName).getData(_boneName);
						var _bone:Bone = armature.getBone(_boneName);
						_bone.origin.copy(_boneData);
						armature.addBone(_bone, _boneName, _boneData.parent);
						
						if(animationDataProxy.movementName){
							armature.animation.play(animationDataProxy.movementName);
						}
					}
					if(!importDataProxy.isSWFSource){
						jsflProxy.changeArmatureConnection(armatureDataProxy.armatureName, armatureDataProxy.source);
					}
				}
			}
			
			private function movementValueChangeHandler(_e:Event):void{
				switch(_e.target){
					case sliderDurationTo:
						numDurationTo.value = sliderDurationTo.value;
					case numDurationTo:
						sliderDurationTo.value = numDurationTo.value;
						animationDataProxy.durationTo = numDurationTo.value;
						break;
					case sliderDurationTween:
						numDurationTween.value = sliderDurationTween.value;
					case numDurationTween:
						sliderDurationTween.value = numDurationTween.value;
						animationDataProxy.durationTween = numDurationTween.value;
						break;
					case checkLoop:
						animationDataProxy.loop = checkLoop.selected;
						break;
					case sliderTweenEasing:
						animationDataProxy.tweenEasing = sliderTweenEasing.value;
						break;
					case sliderScale:
						numScale.value = sliderScale.value;
					case numScale:
						sliderScale.value = numScale.value;
						animationDataProxy.boneScale = numScale.value;
						break;
					case sliderDelay:
						numDelay.value = sliderDelay.value;
					case numDelay:
						sliderDelay.value = numDelay.value;
						animationDataProxy.boneDelay = numDelay.value;
						break;
				}
			}
			
			protected function boneDisplayHighlightColorChangeHandler(event:ColorPickerEvent):void
			{
				boneDisplayGlowFilter.color = event.color;
				
				if(boneDisplay){
					boneDisplay.filters = [boneDisplayGlowFilter];
				}
			}
			
		]]>
	</fx:Script>
	<s:HGroup width="100%" height="100%" gap="0">
		<s:DataGrid id="armatureList" maxWidth="200" width="100%" height="100%">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="{AT_NAME}" headerText="Armature"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:DataGrid id="movementList" maxWidth="150" width="100%" height="100%" sortableColumns="false">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="{AT_NAME}" headerText="Movement"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:Group width="100%" height="100%">
			<s:Label x="10" y="2" height="24" fontWeight="bold" text="Bone" verticalAlign="middle"/>
			<local:DragTree id="boneTree" y="23" width="100%" height="100%" labelField="{AT_NAME}"
							dragEnabled="true" dropEnabled="true"/>
			<mx:ColorPicker x="50" y="0" selectedColor="0xFF0000" change="boneDisplayHighlightColorChangeHandler(event)"/>
		</s:Group>
		<s:DataGrid id="displayList" maxWidth="350" width="100%" height="100%">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="{AT_NAME}" headerText="Texture List"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:HGroup>
	<s:HGroup width="100%" height="300" gap="0">
		<s:Scroller width="100%" height="100%">
			<s:Group>
				<s:Group id="armatureContainerGroup" mouseWheel="onMouseWheelHandler(event)">
					<mx:UIComponent id="armatureContainer"/>
				</s:Group>
			</s:Group>
		</s:Scroller>
		<s:Group width="300" height="100%">
			<s:Button x="10" y="10" width="100" height="24" label="Import" click="{importData()}"/>
			<s:Button x="120" y="10" width="100" height="24" label="Export" click="{exportData()}"/>
			<s:NumericStepper id="numFrameRate" x="235" y="10" width="55" height="24" textAlign="right"
							  minimum="1" maximum="120" value="@{stage.frameRate}"/>
			<s:HSlider id="sliderDurationTo" x="120" y="80" width="100" 
					   minimum="0" maximum="100" snapInterval="1"/>
			<s:NumericStepper id="numDurationTo" x="235" y="70" width="55" height="24" textAlign="right" 
							  minimum="0" maximum="3000" snapInterval="1"/>
			<s:NumericStepper id="numDurationTween" x="235" y="105" width="55" height="24" textAlign="right" 
							  minimum="0" maximum="3000" snapInterval="1"/>
			<s:HSlider id="sliderDurationTween" x="120" y="115" width="100"
					   minimum="0" maximum="100" snapInterval="1"/>
			<s:CheckBox id="checkLoop" x="120" y="175" width="60" height="24" label="Loop"/>
			<s:HSlider id="sliderTweenEasing" x="120" y="150" width="100"
					   minimum="-1" maximum="2" snapInterval="0.05"/>
			<s:Label x="10" y="70" width="100" height="24" text="Tween time" verticalAlign="middle"/>
			<s:Label x="10" y="105" width="100" height="24" text="Animation time" verticalAlign="middle"/>
			<s:Label x="10" y="140" width="100" height="24" text="Keyframe easing" verticalAlign="middle"/>
			<s:NumericStepper id="numScale" x="235" y="210" width="55" height="24"
							  minimum="0" maximum="1000" snapInterval="1" textAlign="right"/>
			<s:HSlider id="sliderScale" x="120" y="220" width="100"
					   minimum="0" maximum="200" snapInterval="5"/>
			<s:Label x="10" y="210" width="100" height="24" text="Bone animation scale" verticalAlign="middle"/>
			<s:NumericStepper id="numDelay" x="235" y="245" width="55" height="24" textAlign="right" 
							  minimum="-100" maximum="100" snapInterval="1"/>
			<s:HSlider id="sliderDelay" x="120" y="255" width="100"
					   minimum="-100" maximum="100" snapInterval="5"/>
			<s:Label x="10" y="245" width="100" height="24" text="Bone Animation delay" verticalAlign="middle"/>
			<s:Label x="10" y="175" width="100" height="24" text="Loop" verticalAlign="middle"/>
		</s:Group>
	</s:HGroup>
</s:VGroup>
