<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:local="*"
		  creationComplete="onCreationCompleteHandler()">
	<fx:Declarations>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import akdcl.skeleton.Armature;
			import akdcl.skeleton.Bone;
			import akdcl.skeleton.objects.BoneData;
			import akdcl.skeleton.utils.ConstValues;
			
			import control.ExportDataCommand;
			import control.LoadFLADataCommand;
			import control.LoadFileDataCommand;
			
			import message.Message;
			import message.MessageDispatcher;
			
			import model.AnimationDataProxy;
			import model.ArmatureDataProxy;
			import model.ImportDataProxy;
			import model.JSFLProxy;
			
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.GridSelectionEvent;
			
			import utils.TextureUtil;
			
			private static const AT_NAME:String = ConstValues.AT + ConstValues.A_NAME;
			
			private var jsflProxy:JSFLProxy;
			
			[Bindable]
			private var importDataProxy:ImportDataProxy;
			
			[Bindable]
			private var armatureDataProxy:ArmatureDataProxy;
			
			[Bindable]
			private var animationDataProxy:AnimationDataProxy;
			
			[Bindable]
			private var isSWFSource:Boolean;
			
			private var armatures:Object;
			private var isDragedArmature:Boolean;
			private var isTextureChanged:Boolean;
			
			private var armature:Armature;
			
			private var maxArmatureWidth:int;
			private var maxArmatureHeight:int;
			private var alert:Alert;
			private var container:Sprite;
			private var shape:Shape;
			
			private function onCreationCompleteHandler():void{
				jsflProxy = JSFLProxy.getInstance();
				importDataProxy = ImportDataProxy.getInstance();
				armatureDataProxy = importDataProxy.armatureDataProxy;
				animationDataProxy = importDataProxy.animationDataProxy;
				
				armatureList.dataProvider = importDataProxy.armaturesMC;
				movementList.dataProvider = animationDataProxy.movementsMC;
				displayList.dataProvider = armatureDataProxy.displaysMC;
				
				armatureList.addEventListener(GridSelectionEvent.SELECTION_CHANGE, onArmatureChangeHandler);
				movementList.addEventListener(GridSelectionEvent.SELECTION_CHANGE, onMovementChangeHandler);
				//displayList.addEventListener(GridSelectionEvent.SELECTION_CHANGE, onTextureChangeHandler);
				
				boneTree.addEventListener(ListEvent.CHANGE, onMovementBoneChangeHandler);
				boneTree.addEventListener(DragEvent.DRAG_COMPLETE, onBoneDragCompleteHandler);
				
				sliderDurationTo.addEventListener(Event.CHANGE, movementValueChangeHandler);
				numDurationTo.addEventListener(Event.CHANGE, movementValueChangeHandler);
				
				sliderDurationTween.addEventListener(Event.CHANGE, movementValueChangeHandler);
				numDurationTween.addEventListener(Event.CHANGE, movementValueChangeHandler);
				
				checkLoop.addEventListener(Event.CHANGE, movementValueChangeHandler);
				
				sliderTweenEasing.addEventListener(Event.CHANGE, movementValueChangeHandler);
				
				sliderScale.addEventListener(Event.CHANGE, movementValueChangeHandler);
				numScale.addEventListener(Event.CHANGE, movementValueChangeHandler);
				
				sliderDelay.addEventListener(Event.CHANGE, movementValueChangeHandler);
				numDelay.addEventListener(Event.CHANGE, movementValueChangeHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FLADATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_ARMATURE_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_ARMATURE_DATA_COMPLETE, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_TEXTURE_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_TEXTURE_DATA_COMPLETE, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_SWF, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_SWF_COMPLETE, onCommandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA_ERROR, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA_COMPLETE, onCommandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT_CANCEL, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT_ERROR, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT_COMPLETE, onCommandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_IMPORT_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_ARMATURE_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_ANIMATION_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_MOVEMENT_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_BONE_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_DISPLAY_DATA, onCommandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_MOVEMENT_DATA, onCommandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_MOVEMENTBONE_DATA, onCommandHandler);
				
				container = new Sprite();
				armatureContainer.addChild(container);
				shape = new Shape();
				shape.graphics.drawRect(0,0,100,100);
				container.addChild(shape);
				container.addEventListener(MouseEvent.MOUSE_DOWN, onContainerMouseHandler);
				container.addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);
			}
			
			private function importData():void{
				switch(importDataProxy.dataImportID){
					case 0:
						LoadFLADataCommand.instance.load(false);
						break;
					case 1:
						LoadFLADataCommand.instance.load(true);
						break;
					case 2:
						LoadFileDataCommand.instance.load();
						break;
				}
			}
			
			private function updateTexture():void{
				if(isSWFSource || !importDataProxy.skeletonName){
					return;
				}
				switch(importDataProxy.textureSortID){
					case 0:
						TextureUtil.packTextures(importDataProxy.textureMaxWidth, importDataProxy.texturePadding, false, importDataProxy.textureXML);
						jsflProxy.packTextures(importDataProxy.textureXML);
						isTextureChanged = true;
						break;
				}
			}
			
			private function exportData():void{
				if(!importDataProxy.skeletonName){
					return;
				}
				ExportDataCommand.instance.export(importDataProxy.dataExportID, isTextureChanged);
			}
			
			private function clearAlert():void{
				if(alert){
					PopUpManager.removePopUp(alert);
					alert = null;
				}
			}
			
			private function onCommandHandler(_e:Message):void{
				var _armatureName:String;
				var _movementName:String;
				switch(_e.type){
					case MessageDispatcher.LOAD_FLADATA:
						if(_e.parameters[0] > 0){
							alert = Alert.show("导入中请稍后...");
							if(armature){
								armature.animation.stop();
							}
						}else{
							alert = Alert.show("未找到符合骨架结构的元件！");
						}
						break;
					case MessageDispatcher.LOAD_FILEDATA:
						alert = Alert.show("导入中请稍后...");
						if(armature){
							armature.animation.stop();
						}
						break;
					case MessageDispatcher.LOAD_ARMATURE_DATA:
						if(alert){
							//+ _e.parameters[0]
							alert.title = "Read armature " + _e.parameters[1] + "/" + _e.parameters[2];
						}
						break;
					case MessageDispatcher.LOAD_ARMATURE_DATA_COMPLETE:
						break;
					case MessageDispatcher.LOAD_TEXTURE_DATA:
						if(alert){
							//+ _e.parameters[0]
							alert.title = "Read texture " + _e.parameters[1] + "/" + _e.parameters[2];
						}
						break;
					case MessageDispatcher.LOAD_TEXTURE_DATA_COMPLETE:
						break;
					case MessageDispatcher.LOAD_SWF:
						break;
					case MessageDispatcher.LOAD_SWF_COMPLETE:
						isSWFSource = false;
						isTextureChanged = false;
						clearAlert();
						importDataProxy.setData(_e.parameters[0], _e.parameters[1], _e.parameters[2]);
						break;
					case MessageDispatcher.LOAD_FILEDATA_ERROR:
						clearAlert();
						break;
					case MessageDispatcher.LOAD_FILEDATA_COMPLETE:
						isSWFSource = true;
						isTextureChanged = false;
						clearAlert();
						importDataProxy.setData(_e.parameters[0], _e.parameters[1], _e.parameters[2]);
						break;
					case MessageDispatcher.EXPORT:
						alert = Alert.show("导出中请稍后...");
						break;
					case MessageDispatcher.EXPORT_CANCEL:
						clearAlert();
						break;
					case MessageDispatcher.EXPORT_ERROR:
						clearAlert();
						break;
					case MessageDispatcher.EXPORT_COMPLETE:
						clearAlert();
						break;
					case MessageDispatcher.CHANGE_IMPORT_DATA:
						for each(armature in armatures){
							armature.dispose();
						}
						armature = null;
						armatures = {};
						
						armatureList.selectedIndex = -1;
						armatureList.selectedIndex = 0;
						onArmatureChangeHandler(null);
						break;
					case MessageDispatcher.CHANGE_ARMATURE_DATA:
						isDragedArmature = false;
						if(armature && armature.display && armature.display.parent){
							armature.display.parent.removeChild(armature.display as DisplayObject);
						}
						
						_armatureName = armatureDataProxy.armatureName;
						armature = armatures[_armatureName];
						if(!armature){
							armatures[_armatureName] = armature = importDataProxy.baseFactory.buildArmature(_armatureName);
						}
						if(armature.display){
							container.scaleX = container.scaleY = 1;
							container.addChild(armature.display as DisplayObject);
						}
						boneTree.dataProvider = armatureDataProxy.bonesMC;
						updateTextureDisplay();
						break;
					case MessageDispatcher.CHANGE_ANIMATION_DATA:
						movementList.selectedIndex = -1;
						movementList.selectedIndex = 0;
						onMovementChangeHandler(null);
						break;
					case MessageDispatcher.CHANGE_MOVEMENT_DATA:
						maxArmatureWidth = 0;
						maxArmatureHeight = 0;
						
						_movementName = _e.parameters[0];
						if(_movementName && armature){
							armature.animation.play(_movementName);
						}
						
						boneTree.selectedIndex = -1;
						boneTree.selectedIndex = 0;
						
						var _durationTo:int = animationDataProxy.durationTo;
						var _durationTween:int = animationDataProxy.durationTween;
						if(_durationTo < 0){
							numDurationTo.value = 0;
							numDurationTo.enabled = false;
							sliderDurationTo.value = 0;
							sliderDurationTo.enabled = false;
						}else{
							numDurationTo.value = _durationTo;
							numDurationTo.enabled = true;
							sliderDurationTo.value = _durationTo;
							sliderDurationTo.enabled = true;
						}
						if(_durationTween < 0){
							numDurationTween.value = 0;
							numDurationTween.enabled = false;
							sliderDurationTween.value = 0;
							sliderDurationTween.enabled = false;
							checkLoop.selected = false;
							checkLoop.enabled = false;
							sliderTweenEasing.value = 0;
							sliderTweenEasing.enabled = false;
							numScale.enabled = false;
							numDelay.enabled = false;
							sliderScale.enabled = false;
							sliderDelay.enabled = false;
						}else{
							numDurationTween.value = _durationTween;
							numDurationTween.enabled = true;
							sliderDurationTween.value = _durationTween;
							sliderDurationTween.enabled = true;
							checkLoop.selected = animationDataProxy.loop;
							checkLoop.enabled = true;
							sliderTweenEasing.value = animationDataProxy.tweenEasing;
							sliderTweenEasing.enabled = true;
							numScale.enabled = true;
							numDelay.enabled = true;
							sliderScale.enabled = true;
							sliderDelay.enabled = true;
						}
						onMovementBoneChangeHandler(null);
						break;
					case MessageDispatcher.CHANGE_BONE_DATA:
						animationDataProxy.changeBone(armatureDataProxy.boneName);
						var _boneScale:Number = animationDataProxy.boneScale;
						var _boneDelay:Number = animationDataProxy.boneDelay;
						numScale.value = _boneScale;
						numDelay.value = _boneDelay;
						sliderScale.value = _boneScale;
						sliderDelay.value = _boneDelay;
						armatureDataProxy.changeBoneDisplay();
						break;
					case MessageDispatcher.UPDATE_MOVEMENT_DATA:
						_movementName = _e.parameters[0];
						if(_movementName && armature){
							armature.animation.play(_movementName);
						}
						if(!isSWFSource){
							jsflProxy.changeMovement(armatureDataProxy.armatureName, _movementName, _e.parameters[1]);
						}
						break;
					case MessageDispatcher.UPDATE_MOVEMENTBONE_DATA:
						_movementName = _e.parameters[0];
						if(_movementName && armature){
							armature.animation.play(_movementName);
						}
						if(!isSWFSource){
							var _movementXMLCopy:XML = _e.parameters[1].copy();
							delete _movementXMLCopy.elements(ConstValues.BONE).*;
							jsflProxy.changeMovement(armatureDataProxy.armatureName, _movementName, _movementXMLCopy);
						}
						break;
				}
			}
			
			private function onEnterFrameHandler(_e:Event):void{
				var _sW:int;
				var _sH:int;
				var _display:Object;
				if(armature){
					armature.update();
					_display = armature.display;
					if(_display){
						_sW = shape.width;
						_sH = shape.height;
						maxArmatureWidth = Math.max(_display.width, maxArmatureWidth);
						maxArmatureHeight = Math.max(_display.height, maxArmatureHeight);
						if(_sW < maxArmatureWidth || _sH < maxArmatureHeight){
							_sW = shape.width = maxArmatureWidth * 1.4;
							_sH = shape.height = maxArmatureHeight * 1.4;
						}else if(_sW > maxArmatureWidth * 1.8 || _sH > maxArmatureHeight * 1.8){
							_sW = shape.width = maxArmatureWidth * 1.4;
							_sH = shape.height = maxArmatureHeight * 1.4;
						}
						if(!isDragedArmature){
							_display.x = _sW * 0.5;
							_display.y = _sH * 0.5;
						}
					}
					
				}
			}
			
			private function onContainerMouseHandler(_e:Event):void{
				if(stage){
					stage.addEventListener(MouseEvent.MOUSE_UP, onContainerMouseHandler);
				}
				var _display:Object = armature?armature.display:null;
				if(!_display){
					return;
				}
				switch(_e.type){
					case MouseEvent.MOUSE_DOWN:
						isDragedArmature = true;
						_display.startDrag();
						break;
					case MouseEvent.MOUSE_UP:
						_display.stopDrag();
						break;
				}
			}
			
			private function onMouseWheelHandler(event:MouseEvent):void
			{
				var _scale:Number;
				_scale = container.scaleX;
				if(event.delta > 0){
					if(_scale < 4){
						container.scaleX = container.scaleY = _scale + 0.1;
					}
				}else{
					if(_scale > 0.2){
						container.scaleX = container.scaleY = _scale - 0.1;
					}
				}
				updateTextureDisplay();
			}
			
			private function updateTextureDisplay():void{
				armatureContainerGroup.width = container.width;
				armatureContainerGroup.height = container.height;
			}
			
			private function onArmatureChangeHandler(_e:Event):void{
				var _armatureName:String = ImportDataProxy.getElementName(armatureList.selectedItem as XML);
				armatureDataProxy.setData(importDataProxy.getArmatureXMLByName(_armatureName));
				animationDataProxy.setData(importDataProxy.getAnimationXMLByName(_armatureName));
			}
			
			private function onMovementChangeHandler(_e:Event):void{
				var _movementName:String = ImportDataProxy.getElementName(movementList.selectedItem as XML);
				animationDataProxy.changeMovement(_movementName);
			}
			
			private function onMovementBoneChangeHandler(_e:Event):void{
				var _boneName:String = ImportDataProxy.getElementName(boneTree.selectedItem as XML);
				armatureDataProxy.changeBone(_boneName);
			}
			
			private function onBoneDragCompleteHandler(_e:DragEvent):void{
				if(armatureDataProxy.changeBoneParent(boneTree.lastMoveNode)){
					var _boneName:String = armatureDataProxy.boneName;
					animationDataProxy.changeBoneParent(_boneName);
					if(armature){
						var _boneData:BoneData = importDataProxy.skeletonData.getArmatureData(importDataProxy.armatureDataProxy.armatureName).getData(_boneName);
						var _bone:Bone = armature.getBone(_boneName);
						_bone.origin.copy(_boneData);
						armature.addBone(_bone, _boneName, _boneData.parent);
						
						if(animationDataProxy.movementName){
							armature.animation.play(animationDataProxy.movementName);
						}
					}
					if(!isSWFSource){
						jsflProxy.changeArmatureConnection(armatureDataProxy.armatureName, armatureDataProxy.source);
					}
				}
			}
			
			private function movementValueChangeHandler(_e:Event):void{
				switch(_e.target){
					case sliderDurationTo:
						numDurationTo.value = sliderDurationTo.value;
					case numDurationTo:
						sliderDurationTo.value = numDurationTo.value;
						animationDataProxy.durationTo = numDurationTo.value;
						break;
					case sliderDurationTween:
						numDurationTween.value = sliderDurationTween.value;
					case numDurationTween:
						sliderDurationTween.value = numDurationTween.value;
						animationDataProxy.durationTween = numDurationTween.value;
						break;
					case checkLoop:
						animationDataProxy.loop = checkLoop.selected;
						break;
					case sliderTweenEasing:
						animationDataProxy.tweenEasing = sliderTweenEasing.value;
						break;
					case sliderScale:
						numScale.value = sliderScale.value;
					case numScale:
						sliderScale.value = numScale.value;
						animationDataProxy.boneScale = numScale.value;
						break;
					case sliderDelay:
						numDelay.value = sliderDelay.value;
					case numDelay:
						sliderDelay.value = numDelay.value;
						animationDataProxy.boneDelay = numDelay.value;
						break;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	<s:HGroup width="100%" height="100%" gap="0">
		<s:DataGrid id="armatureList" maxWidth="200" width="100%" height="100%">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="{AT_NAME}" headerText="Armature"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:DataGrid id="movementList" maxWidth="150" width="100%" height="100%" sortableColumns="false">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="{AT_NAME}" headerText="Movement"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:Group width="100%" height="100%">
			<s:Label x="10" y="2" height="24" fontWeight="bold" text="Bone" verticalAlign="middle"/>
			<local:DragTree id="boneTree" y="25" width="100%" height="100%" labelField="{AT_NAME}"
							dragEnabled="true" dropEnabled="true"/>
		</s:Group>
		<s:DataGrid id="displayList" maxWidth="350" width="100%" height="100%">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="{AT_NAME}" headerText="Texture List"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:HGroup>
	<s:HGroup width="100%" height="300" gap="0">
		<s:Group width="170" height="100%">
			<s:Label x="10" y="10" width="100" height="24" text="Tween time" verticalAlign="middle"/>
			<s:NumericStepper id="numDurationTo" x="105" y="10" width="55" height="24" textAlign="right" 
							  minimum="0" maximum="3000" snapInterval="1"/>
			<s:HSlider id="sliderDurationTo" x="10" y="40" width="150" 
					   minimum="0" maximum="100" snapInterval="1"/>
			<s:Label x="10" y="60" width="100" height="24" text="Animation time" verticalAlign="middle"/>
			<s:NumericStepper id="numDurationTween" x="105" y="60" width="55" height="24" textAlign="right" 
							  minimum="0" maximum="3000" snapInterval="1"/>
			<s:HSlider id="sliderDurationTween" x="10" y="90" width="150"
					   minimum="0" maximum="100" snapInterval="1"/>
			<s:CheckBox id="checkLoop" x="105" y="108" width="60" height="24" label="Loop"/>
			<s:Label x="10" y="110" width="100" height="24" text="Keyframe easing" verticalAlign="middle"/>
			<s:HSlider id="sliderTweenEasing" x="10" y="140" width="150"
					   minimum="-1" maximum="2" snapInterval="0.05"/>
			<s:Label x="10" y="190" width="100" height="24" text="Bone animation scale" verticalAlign="middle"/>
			<s:NumericStepper id="numScale" x="105" y="190" width="55" height="24"
							  minimum="0" maximum="1000" snapInterval="1" textAlign="right"/>
			<s:HSlider id="sliderScale" x="10" y="220" width="150"
					   minimum="0" maximum="200" snapInterval="5"/>
			<s:Label x="10" y="240" width="100" height="24" text="Bone Animation delay" verticalAlign="middle"/>
			<s:NumericStepper id="numDelay" x="105" y="240" width="55" height="24" textAlign="right" 
							  minimum="-100" maximum="100" snapInterval="1"/>
			<s:HSlider id="sliderDelay" x="10" y="270" width="150"
					   minimum="-100" maximum="100" snapInterval="5"/>
		</s:Group>
		<s:Scroller width="100%" height="100%">
			<s:Group>
				<s:Group id="armatureContainerGroup" mouseWheel="onMouseWheelHandler(event)">
					<mx:UIComponent id="armatureContainer"/>
				</s:Group>
			</s:Group>
		</s:Scroller>
		<s:Group width="220" height="100%">
			<s:Button x="10" y="10" width="70" height="24" label="Import" click="{importData()}"
					  />
			<s:ComboBox x="90" y="10" width="120" height="24" textAlign="right"
						dataProvider="{importDataProxy.dataImportAC}"
						selectedIndex="@{importDataProxy.dataImportID}"
						/>
			<s:Button x="10" y="40" width="70" height="24" label="Export" click="{exportData()}"/>
			<s:ComboBox x="90" y="40" width="120" height="24" textAlign="right"
						dataProvider="{importDataProxy.dataExportAC}"
						selectedIndex="@{importDataProxy.dataExportID}"
						/>
			<s:Label x="10" y="100" width="90" height="24" text="Texture sort" verticalAlign="middle"/>
			<s:ComboBox x="110" y="100" width="100" height="24" textAlign="right" 
						dataProvider="{importDataProxy.textureSortAC}"
						selectedIndex="@{importDataProxy.textureSortID}"
						enabled="{!isSWFSource}"
						/>
			<s:Label x="10" y="130" width="90" height="24" text="Texture width" verticalAlign="middle"/>
			<s:ComboBox x="110" y="130" width="100" height="24" textAlign="right"
						change="{updateTexture()}"
						dataProvider="{importDataProxy.textureMaxWidthAC}"
						enabled="{importDataProxy.textureSortID == 0 &amp;&amp; !isSWFSource}"
						selectedIndex="@{importDataProxy.textureMaxWidthID}"
						/>
			<s:Label x="10" y="160" width="90" height="24" text="Texture padding" verticalAlign="middle"/>
			<s:NumericStepper x="110" y="160" width="100" height="24" textAlign="right" maximum="100" minimum="0"
							  change="{updateTexture()}"
							  enabled="{importDataProxy.textureSortID == 0 &amp;&amp; !isSWFSource}"
							  value="@{importDataProxy.texturePadding}"
							  />
			<s:Label x="10" y="220" width="90" height="24" text="Frame rate" verticalAlign="middle"/>
			<s:NumericStepper id="numFrameRate" x="110" y="220" width="100" height="24" textAlign="right"
							  minimum="1" maximum="120" value="@{stage.frameRate}"/>
		</s:Group>
	</s:HGroup>
</s:VGroup>
